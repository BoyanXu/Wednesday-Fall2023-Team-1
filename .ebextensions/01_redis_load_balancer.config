Resources:
  MyRedisCache:
    Type: "AWS::ElastiCache::CacheCluster"
    Properties:
      CacheNodeType: "cache.t2.micro"  # Adjust the cache node type as needed
      Engine: "redis"
      NumCacheNodes: 1
      Port: 6379

Outputs:
  RedisEndpoint:
    Description: "Redis endpoint address"
    Value: !GetAtt MyRedisCache.RedisEndpoint.Address

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow traffic to Redis cache"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupName: {"Fn::GetAtt": ["MyRedisCache", "SecurityGroups.0.GroupName"]}

  MyLoadBalancer:
    Type: "AWS::ElasticLoadBalancing::LoadBalancer"
    Properties:
      AvailabilityZones:
        - "us-east-1a"  # Adjust the availability zone(s) as needed
      Listeners:
        - LoadBalancerPort: 80
          InstancePort: 80
          Protocol: HTTP
      Instances: []
      SecurityGroups: [{"Fn::GetAtt": ["MySecurityGroup", "GroupId"]}]
      CrossZone: true

  MyEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName: {"Ref": "AWSEBAutoScalingGroup"}
      EnvironmentName: "checkvibe-env" 
      SolutionStackName: "64bit Amazon Linux 2022.09 v5.12.4 running Python 3.11"
      OptionSettings:
        - Namespace: aws:elasticbeanstalk:environment:process:default
          OptionName: HealthCheckPath
          Value: "/"

        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: REDIS_HOST
          Value: {"Fn::GetAtt": ["MyRedisCache", "PrimaryEndPoint.Address"]}

        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: REDIS_PORT
          Value: "6379"

        - Namespace: aws:elbv2:listener:80
          OptionName: DefaultProcess
          Value: "http"

        - Namespace: aws:elbv2:listener:80
          OptionName: ListenerEnabled
          Value: "true"

        - Namespace: aws:elbv2:listener:80
          OptionName: Protocol
          Value: "HTTP"

        - Namespace: aws:elbv2:targetgroup:http
          OptionName: Port
          Value: "80"

        - Namespace: aws:elbv2:targetgroup:http
          OptionName: Protocol
          Value: "HTTP"

        - Namespace: aws:elbv2:balancer
          OptionName: Subnets
          Value:
            - "subnet-0575a7132bff77d0c"  # Replace with your subnet ID
            - "subnet-0007a63f94f02f1c6"  # Replace with another subnet ID

        - Namespace: aws:elbv2:balancer
          OptionName: SecurityGroups
          Value: {"Fn::GetAtt": ["MySecurityGroup", "GroupId"]}

        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: InstanceType
          Value: "t2.micro"  # Adjust the instance type as needed

        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: IamInstanceProfile
          Value: "aws-elasticbeanstalk-ec2-role"

        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: RootVolumeType
          Value: "gp2"

        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: RootVolumeSize
          Value: "8"

        - Namespace: aws:autoscaling:asg
          OptionName: MinSize
          Value: "2"

        - Namespace: aws:autoscaling:asg
          OptionName: MaxSize
          Value: "2"  # Set the maximum number of instances to 2

        - Namespace: aws:autoscaling:asg
          OptionName: Cooldown
          Value: "300"
